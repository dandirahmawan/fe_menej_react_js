import React from 'react'
import { baseUrl } from '../../const/const'
import { getCookieUserId, getCookieSessionId, popUpAlert } from '../../function/function'
import ItemUserAddMember from '../item_user_add_member'
import ItemUserAddMemberSelected from '../item_user_add_member_selected'
import ReactDom from 'react-dom'
import {ApiFetch} from '../apiFetch'
import {SpinnerButton} from "../spinner"
import Permition from './permition'
import {Spinner} from '../spinner'

class add_member extends React.Component{

    constructor(){
        super()
        this.state = {
            addMemberData : [],
            addMemberDataSelected: [],
            listRemovMember:[],
            popup: "",
            isLoad: true,
            permition: {"permitionData":[]}
        }

        this.checkAddMember = this.checkAddMember.bind(this)
        this.commitAddMember = this.commitAddMember.bind(this)
        this.goRight = this.goRight.bind(this)
        this.checkRemoveMember = this.checkRemoveMember.bind(this)
        this.goLeft = this.goLeft.bind(this)
        this.setPermition = this.setPermition.bind(this)
        this.blockClick = this.blockClick.bind(this)
        this.hidePopup = this.hidePopup.bind(this)
        this.okPermition = this.okPermition.bind(this)
        this.inviteUser = this.inviteUser.bind(this)
        this.cancelRequest = this.cancelRequest.bind(this)
    }

    componentDidMount(){
        var elm = document.getElementById("base-add-member")
        var h = elm.offsetHeight
        var w = elm.offsetWidth
        var top = (window.innerHeight - h) / 2 
        var left = (window.innerWidth - w) / 2
        
        elm.style.top = top+"px"
        elm.style.left = left+"px"

        var form = new FormData()
        form.append("userId", getCookieUserId())
        form.append("sessionId", getCookieSessionId())
        form.append("projectId", this.props.projectId)
        ApiFetch("/manage_member", {
            method: "POST",
            body: form
        }).then(rst => rst.json())
        .then(result => {
            for(var i = 0;i<result.length;i++){
                result[i].isChecked = ""
            }

            this.setState({
                addMemberData: result,
                isLoad: false
            })
              
            //set style base data height
            var hdr = document.getElementById("header-add-member")
            var ftr = document.getElementById("footer-add-member")
            var mam = document.getElementsByClassName("main-add-member")
            for(var i = 0;i<mam.length;i++){
                mam[i].style.height = 350 - (parseInt(hdr.offsetHeight) + ftr.offsetHeight)+"px"
            }
        })
    }

    checkAddMember(userId){
        this.setState(prev => {
            const newData = prev.addMemberData.map(dt => {
                if(dt.userId == userId){
                    if(dt.isChecked == 'Y'){
                        dt.isChecked = ""
                    }else{
                        dt.isChecked = "Y"
                    }
                }
                return dt
            })

            return{
                addMemberData: newData
            }
        })
    }

    checkRemoveMember(userId){
        this.state.addMemberData.map(data => {
            if(data.userId == userId){
                if(data.isCheckedRemove == 'Y'){
                    data.isCheckedRemove = ""
                    var idx = this.state.listRemovMember.indexOf(data)
                    this.state.listRemovMember.splice(idx, 1)
                }else{
                    data.isCheckedRemove = "Y"
                    var idx = this.state.listRemovMember.indexOf(data)
                    if(idx < 0){
                        this.state.listRemovMember.push(data)
                    }
                }
            }
            return data
        })
    }

    goRight(){
        const newData = this.state.addMemberData.map(dt => {
            if(dt.isChecked == 'Y'){
                dt.isChecked = ""
                dt.isMember = "Y"
            }
            return dt
        })
        
        this.setState({
            addMemberData: newData
        })
    }

    goLeft(){
        this.state.listRemovMember.map(dt => {
            var idx = this.state.addMemberData.indexOf(dt)
            this.state.addMemberData[idx].isMember = "N"
            this.state.addMemberData[idx].isCheckedRemove = ""
        })

        this.setState({
            listRemovMember: []
        })
    }

    commitAddMember(e){
        var listUserId = []
        var form = new FormData()
        this.state.addMemberData.map(dt => {
            if(dt.isMember == "Y"){
                listUserId.push(dt.userId) 
            }
        })

        if(listUserId.length > 0){
            let t = e.target
            t.style.opacity = 0.5
            ReactDom.render(<SpinnerButton size="15px"/>, t)

            form.append("userIdList", listUserId)
            form.append("userId", getCookieUserId())
            form.append("sessionId", getCookieSessionId())
            form.append("projectId", this.props.projectId)
            form.append("permition", JSON.stringify(this.state.permition))

            ApiFetch("/commit_manage_member", {
                method: "POST",
                body: form
            }).then(res => res.json())
            .then(result => {
                this.props.refresh(result, listUserId)
                ReactDom.render("Add", t)
                t.style.opacity = 1
            })
        }else{
            popUpAlert("No user selected", "warning")
        }
    }

    setPermition(userId){
        let projectId = this.props.projectId
        let elm = document.getElementById("base-add-member")
        elm.style.zIndex = 999

        let dataPermition = []
        this.state.permition.permitionData.map(dt => {
            if(dt.userId == userId){
                dataPermition = dt.permition
            }
        })

        this.setState({
            popup: <Permition userId={userId} 
                            projectId={projectId}
                            dataPermition={dataPermition} 
                            commitPermition={this.okPermition}
                            cancelPermition={this.hidePopup}/>
        })
    }

    okPermition(dataJson){
        let i = 0;
        let idx = 0;
        let isReady = false
        this.state.permition.permitionData.map(dt => {
            if(dt.userId == dataJson.userId){
                isReady = true
                idx = i
            }
            i++
        })

        if(!isReady){
            this.state.permition.permitionData.push(dataJson)
        }else{
            this.state.permition.permitionData[idx] = dataJson
        }

        let elm = document.getElementById("base-add-member")
        elm.style.zIndex = 1000
        this.setState({
            popup: "",
            permition: this.state.permition
        })
    }

    blockClick(){
        let elm = document.getElementById("base-add-member")
        elm.style.zIndex = 1000

        this.setState({
            popup: ""
        })
    }

    hidePopup(){
        let elm = document.getElementById("base-add-member")
        elm.style.zIndex = 1000

        this.setState({
            popup: ""
        })
    }

    inviteUser(btn, userId){
        let loop = true
        for(let i = 0;loop == true;i++){
            let dt = this.state.addMemberData[i]
            if(userId == dt.userId){
                loop = false
                let form = new FormData()
                dt.isInvited = "Y"
                
                this.setState({
                    addMemberData: this.state.addMemberData
                })

                //send invitation to server
                form.append("email", dt.emailUser)
                form.append("userId", getCookieUserId())
                ApiFetch("/invitation", {
                    method : "POST",
                    body : form 
                }).then(res => res.text()).then(result => {
                    // dt.isInvited = "Y"
                    // console.log(this.state.addMemberData)
                })
            }
        }
    }

    cancelRequest(userId){
        let loop = true
        for(let i = 0;loop == true;i++){
            let dt = this.state.addMemberData[i]
            if(userId == dt.userId){
                loop = false
                let form = new FormData()
                dt.isInvited = "N"
                
                this.setState({
                    addMemberData: this.state.addMemberData
                })

                //send invitation to server
                form.append("email", dt.emailUser)
                form.append("userId", getCookieUserId())
                ApiFetch("/cancel_invitation", {
                    method : "POST",
                    body : form 
                })
            }
        }
    }

    render(){

        const dataSelect = this.state.addMemberData.map(dt => {
            if(dt.isRelated == "Y")
            {
                return <ItemUserAddMember
                            checkAddMember={this.checkAddMember} 
                            userName= {dt.userName}
                            isMember= {dt.isMember}
                            userId={dt.userId}
                            userEmail={dt.emailUser}
                            picProfile={dt.picProfile}
                            userSelected={dt.isChecked}/>
            }
        })

        
        let countData = 0
        const dataSelected = this.state.addMemberData.map(dt =>{
            if(dt.isMember == "Y"){
                countData++
                return <ItemUserAddMemberSelected
                            checkRemoveMember={this.checkRemoveMember}
                            setPermition={() => this.setPermition(dt.userId)} 
                            invite={this.inviteUser}
                            cancelRequest={() => this.cancelRequest(dt.userId)}
                            userName= {dt.userName}
                            userId={dt.userId}
                            userEmail={dt.emailUser}
                            picProfile={dt.picProfile}
                            isRelated={dt.isRelated}
                            isInvited={dt.isInvited}
                            userSelected={dt.isCheckedRemove}/>
            }
        })

        return(
            <React.Fragment>
                <div onClick={this.blockClick} className="block"></div>
                {this.state.popup}
                <div id='base-add-member' style={{background: "#FFF", position: "fixed", zIndex: "1000", borderRadius: "3px"}}>
                    <div id="main-base-add-member" style={{width: "700px", height: "350px"}}>
                        <div id="header-add-member" className="bold main-border-bottom" style={{padding: "10px", fontSize: "14px"}}>
                            Manage member
                        </div>
                        {
                            (this.state.isLoad)
                            ?   
                                <Spinner size="20px"/>
                            :
                                <div>
                                    <div className="main-add-member">
                                        <div className="main-add-member" style={{float: "left", width: "324px", overflowY: "scroll"}}>
                                            <div className="bold second-background-grs main-border-bottom" style={{padding: "10px", fontSize: "12px", width: "304px", position: "fixed"}}>Related user</div>
                                            <div style={{marginTop: "35px"}}>
                                                {dataSelect}
                                            </div>
                                        </div>
                                        <div className="main-add-member main-border-left main-border-right" style={{float: "left", width: "50px", textAlign: "center"}}>
                                            <div style={{marginTop: "100px"}}>
                                                <button onClick={this.goRight} style={{background: "none"}}><i className="fa fa-angle-right" style={{fontSize: "18px"}}></i></button><br/>
                                                <button onClick={this.goLeft} style={{background: "none"}}><i className="fa fa-angle-left" style={{fontSize: "18px"}}></i></button>
                                            </div>
                                        </div>
                                        <div className="main-add-member" style={{float: "left", width: "324px", overflowY: "scroll"}}>
                                            <div className="bold second-background-grs main-border-bottom" style={{padding: "10px", fontSize: "12px", width: "304px", position: "fixed"}}>Member</div>
                                            <div style={{marginTop: "35px"}}>
                                                {
                                                    (countData == 0) ? 
                                                    <div className="bold second-font-color" style={{fontSize: "11px", textAlign: "center", padding: "30px"}}>
                                                        this project<br/>not have a member
                                                    </div> 
                                                    : dataSelected
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div id="footer-add-member" className="main-border-top" style={{padding: "10px", textAlign: "right", height: "27px"}}>
                                        <button onClick={this.commitAddMember} className="btn-primary" style={{fontSize: "12px"}}>Save change</button>
                                        <button onClick={this.props.cancel} style={{fontSize: "12px", marginLeft: "5px", background: "none"}}>Cancel</button>
                                    </div>
                                </div>
                        }
                    </div>
                </div>
            </React.Fragment>
        )
    }
}

export default add_member